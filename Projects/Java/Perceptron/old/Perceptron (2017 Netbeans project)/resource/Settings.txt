image_directory resource/images

audio_line 0

*ABOUT THIS THING...
* Perceptron reads this file on startup to determing the values of
* key program parameters. You may alter these settings at will, some 
* values may cause the program to run out of memory or behave 
* unexpectedly. Try to follow the guidelines for each setting.
* Follow the format <variable name> + " " + <value>

* SCREEN SETTINGS

* These settings control the resolution of the screens used for
* animation.

* On older machines and with older versions of Java you may need to 
* reduce some of these values significantly to achieve a reasonable
* frame rate. The current settings work well for my 1.3GHz Inspirion
* with 2GB of RAM.

* This determines the resolution of Perceptron's screen. Perceptron 
* attempts to set the display size to the smallest possible display
* that supports the resolution listed here. If the screen width and
* height listed here are greater than the maximum resolution of the 
* monitor, then these values default to the maximum monitor resolution.
* Set these to smaller values to increase speed at runtime. Ideally
* the screen resolution should equal one of the actual resolutions of
* your physical monitor.
* possible values : integers greater than 0



screen_width  640
screen_height 400

//screen_width  800
//screen_height 500

//screen_width  1024
//screen_height 640
//screen_width  800
//screen_height 600
//screen_width  480
//screen_height 480
//screen_width  400
//screen_height 400
//screen_width  320
//screen_height 240
//screen_width  480
//screen_height 360
//screen_width  480
//screen_height 480
//screen_width  1280
//screen_height 800
//screen_width  1440  
//screen_height 900
//screen_width  1280
//screen_height 800

*TREE SETTINGS
* These settings control aspects of the Tree located in the foreground

* This is the largest depth to which to render the tree that is in
* the foreground. Reduce this if the program runs out of memory 
* (which may manifest as the program failing to run at all)
* The number of computations required to draw the tree scales as
* 2^(1 + tree_depth) so the time for rendering the tree grows rapidly 
* as a function of depth.
* possible values : integers greater than 0 and less than 30

max_tree_depth 2

* This is minimum depth to which to render the tree. By default,
* Perceptron will adjust the depth of the tree in order to maintain
* a reasonable frame rate. The tree will always be rendered at least to 
* this depth.
* possible values : integers greater than 0 and less than 30

min_tree_depth 1

* Equation Definitions

*   expressions in terms of z, no spaces please

*   Legal constants include 
*   e,
*   i,
*   p(pi),
*   f(golden ratio)
*   w(field width)
*   h(field height)

*   oh also it hates unary minus because I am dumb
* PA-HHL1581 hit my car mirror

map z
map z*z
map z*z*z
map z*abs(z)
map e^z+e^(iz)
map e^z+e^(-iz)
map e^z+e^(z*e^(i*p/4))
map e^z+e^(z*e^(i*p/-4))
map 1/(z*e^(i*2*p/3)+1.4)+1/(z*e^(i*-2*p/3)+1.4)+1/(z+1.4)
map conj(e^z+e^(iz))
map conj(e^z+e^(-iz))
map conj(e^z+e^(z*e^(i*p/4)))
map conj(e^z+e^(z*e^(i*p/-4)))
map abs(z)*e^(i*arg(z)*2)*2
map z*z*e^(i*abs(z))
map z*z*z*e^(i*abs(z))
map z*e^(i*abs(z))*abs(z)/f
map acos(z*z)*asin(z*z)*e^(i*abs(z))
map acos(z*z)*asin(z*z)
map f/z+i*z
map sin(z)^2
map cos(z)^2
map z*z+2*ln(z)*h/p;
map (z+1)/(z-1)+(z-1)/(z+1)
map (z+i)/(z-i)+(z-i)/(z+i)
map z/abs(sqrt((absz)^2-1.5))

